EM-SparsePhi - external memory LCP array construction algorithm
===============================================================


Description
-----------

This package contains implementation of the external memory LCP array
construction algorithm called EM-SparsePhi. The algorithm is described
in the paper

  Juha Karkkainen and Dominik Kempa:
  Faster External Memory LCP Array Construction.
  24th European Symposium on Algorithms (ESA), 2016.

The latest version of EM-SparsePhi is available at:
  http://www.cs.helsinki.fi/group/pads/



Requirements
------------

EM-SparsePhi has no external dependencies (libraries, cmake, etc).
It only requires:
- g++ compiler supporting the -std=c++0x flag (all modern versions)
- A 64-bit operating system. The current version has been tested
  on Linux/PC.



Compilation and usage
---------------------

The package contains a single Makefile in the main directory. Type
'make' to build the two executables that allow computing the LCP array
of a given file sequentially and in parallel. For usage instructions,
run the programs without any arguments.

EM-SparsePhi relies on the prior computation of the suffix array for the
input text. The currently fastest external memory algorithms for suffix
array construction are pSAscan and fSAIS. Both algorithms are available
from http://www.cs.helsinki.fi/group/pads/

Example
~~~~~~~

The simplest usage for EM-SparsePhi is as follows. Suppose the text
is located in /data/input.txt, the suffix array of input.txt is
located in /data/input.txt.sa5 and is encoded using 40-bit integers.
Then, to compute the LCP array of input.txt using the parallel version
of EM-SparsePhi, type:

  $ ./construct_lcp_parallel /data/input.txt

This will write the output LCP array to /data/input.txt.lcp5. Each
element of the LCP array is encoded using the same number of bits as
each entry in the suffix array, i.e., in this case the output LCP
will take up 5n bytes of disk space. By default, the algorithm runs
in the in-place mode (i.e., it does not require any extra working disk
space, it is sufficient that there is enough space to accommodate the
output LCP array), it uses 3.5GiB of RAM for computation, and it
assumes that the input text is over byte alphabet. A more advanced
usage is demonstrated below (the "\" symbol can be omitted).

  $ ./construct_lcp_parallel ./input.txt -s ~/data/input.txt.sa \
    -o ../input.txt.lcp -c 4 -i 6 -f -m 8gi

Explanation:
- The 's' flag allows specifying the location and filename of the
  suffix array. The default location and filename is the same as
  input text, with the appended ".saX" suffix, where X is the used
  integer size (see the explanation of 'i' flag below).
- The 'o' flag allows specifying the location and filename of the
  output LCP array. The default location and filename is the same
  as input text, with the appended ".lcpX" suffix, where X is the
  used integer size (see the explanation of the 'i' flag below).
- The 'c' flag allows specifying the size of text symbol (in bytes).
  The default size of text symbol is 1 byte. In this example, the
  symbol size is set to 4 bytes. Currently supported are values from
  the range [1, 8].
- The 'i' flag allows specifying the integer size (in bytes) used to
  encode the input suffix array and the output LCP array. The default
  integer size is 5 bytes. In this example, the type is set to a
  6-byte integer. Currently supported are values from the range [4, 8].
- The 'f' flag enables faster computation at the price of higher disk
  use. The algorithm in this mode is no longer inplace.
- The 'm' flag allows specifying the amount of RAM used during the
  computation (in bytes). In this example, the RAM limit is set to
  8gi = 8 * 2^30 bytes (see the explanation below).

Notes:
- The argument of the 'm' flag (RAM used during the computation)
  can be specified either explicitly or using common suffixes such
  as K, M, G, T, Ki, Mi, Gi, Ti which respectively correspond to
  multipliers: 10^3, 10^6, 10^9, 10^12, 2^10, 2^20 2^30, 2^40. Suffix
  names are not case-sensitive, e.g., Ti = ti, k = K.
- The flags specifying integer type, output filename, etc. can be
  given in any order.
- Filenames passed as command-line arguments can be given as absolute,
  relative, and common (such as $HOME) paths, e.g., ../input.txt and
  ~/data/input.txt are valid paths, see also example above.
- To enable additional statistics about the computation (alternative
  counter of I/O volume and tracing of the disk usage), uncomment line
  with AUX_DISK_FLAGS in the Makefile. When this flag is enabled, the
  computation could slow down thus this flag is disabled by default.
- The usage of the sequential version of the algorithm is identical to
  the parallel version. The only difference in the execution is that
  the sequential version uses exactly one thread for computation.



Troubleshooting
---------------

1. I am getting an error about the exceeded number of opened files.

Solution: The error is caused by the operating system imposing a
limit on the maximum number of files opened by a program. The limit
can be increased with the "ulimit -n newlimit" command. However, in
Linux the limit cannot be increased beyond the so-called "hard limit",
which is usually only few times larger. Furthermore, this is a
temporary solution that needs to repeated every time a new session is
started. To increase the limits permanently, edit (as a root) the file
/etc/security/limits.conf and add the following lines at the end
(including the asterisks):

* soft nofile 128000
* hard nofile 128000

This increases the limit to 128000 (use larger values if necessary).
The new limits apply (check with ulimit -n) after starting new session.



Limitations
-----------
- At present the only limitation in the usage of the algorithm is the
  need to ensure that the limit for the number of opened files in
  the system is sufficiently large to prevent the above error. This
  technical shortcoming will be eliminated in the future versions of
  EM-SparsePhi.



Terms of use
------------

EM-SparsePhi is released under the MIT/X11 license. See the file LICENCE
for more details.

If you use this code, please cite the paper mentioned above and publish
the URL from which you downloaded the code.




Written by Dominik Kempa and Juha Karkkainen.
Helsinki, June 2017.
